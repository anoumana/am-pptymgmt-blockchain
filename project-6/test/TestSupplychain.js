// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli

  // Define 'owner'
  const owner = accounts[0] ;

  const rentalName = "Hawaii Beach House";
  const rentalAddress = "429 Kaanapali, Hawaii";
  const rentalNotes = "4 bedroom, 5 baths. Ocean view";
  const rentalPricePerDay = 10;
  const rentalOwnerID = accounts[1];

  const renterID = accounts[2];
//  const checkInDate = now() + 86400000;
//  const checkOutDate = now() + (86400000*2);

  const pptyMgrID = accounts[3];
  const cleaningCompanyID = accounts[4];


//   Accounts:
//   (0) 0xd74004be25adae4b36f91599bfc77d1f03663009
//   (1) 0x3d3e12753df66cfebc7b29ecfe24f4a75fe4b756
//   (2) 0xe65e37974dd1306f634f2357359c4f2c9352ebce
//   (3) 0xbcae5e1fd1098989c5d1de554acd50808c32873f
//   (4) 0x8c6e45ad15fdf13abbe25180356bdbe14e3bf74c
//   (5) 0xc24fe1ace1146d89b1f198a1c5b2fb1ca3d9ad0a
//   (6) 0xf64f3628effd3f44aca7accfede1e2e1ee2b9349
//   (7) 0xd81fefa6addf81d7c2710a140f5af67aed9386e3
//   (8) 0x1c89705b5a57429b4405f6a1c3346bc46e693287
//   (9) 0xd43f3436f43680560f573ddb98fee75c6ec796dc


    console.log(" accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("rentalOwnerID: accounts[1] ", accounts[1])
    console.log("renterID: accounts[2] ", accounts[2])
    console.log("pptyMgrID: accounts[3] ", accounts[3])
    console.log("cleaningCompanyID: accounts[4] ", accounts[4])

    //1st Test
    it("Testing smart contract function subscribe()", async() => {
        const supplyChain = await SupplyChain.deployed();

        console.log("pmID" + pptyMgrID);
        const rentID = await supplyChain.subscribe(rentalName, pptyMgrID, cleaningCompanyID, {value: 1000});
        //console.log("rentalID ", rentID);
        console.log("Sent info : " + rentalName + "{}" + pptyMgrID + "{}" + cleaningCompanyID);
    
        // Verify the result set
        const result = await supplyChain.getRentalOrgInfo.call(1)

        console.log("getRental ORg Result : " + result[0] + "{}" + result[1] + result[2] + "{}" + result[3] + "{}" + result[4] )

        const result1 = await supplyChain.getRentalPptyInfo.call(1)

        console.log("getRentalPPty Result : " + result1[0] + "[]" + result1[1]+ "[]" + result1[2])
   
    })    

    // 2nd Test
    it("Testing smart contract function registerRental() ", async() => {
        const supplyChain = await SupplyChain.deployed();

        await supplyChain.registerRental(1,rentalAddress, rentalNotes, rentalPricePerDay);
        // Retrieve the rental info from blockchain by calling function getRentalPptyInfo()
        const result1 = await supplyChain.getRentalPptyInfo.call(1);

        console.log("2getRentalPPty Result : " + result1[0] + "[]" + result1[1]+ "[]" + result1[2]+ "[]" + result1[3]+ "[]" + result1[4])
         
        const result = await supplyChain.getRentalOrgInfo.call(1);

        console.log("2getRental Result : " + result[0] + "{}" + result[1] + result[2] + "{}" + result[3] + "{}" + result[4] )

        // Verify the result set
        assert.equal(result1[0], rentalName)
        assert.equal(result1[3], "In Market");
        
    })    

    // 3rd Test
    it("Testing smart contract function bookRental() ", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        await supplyChain.bookRental(1, 3, {value: 1000});
        // Retrieve the rental info from blockchain by calling function getRentalPptyInfo()
        const result1 = await supplyChain.getRentalPptyInfo.call(1);

        console.log("2getRentalPPty Result : " + result1[0] + "[]" + result1[1]+ "[]" + result1[2]+ "[]" + result1[3]+ "[]" + result1[4])
     
        // Verify the result set
        assert.equal(result1[3], "Rented");
        
    })    

    // 4th Test
    it("Testing smart contract function scheduleAppointment() ", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        await supplyChain.scheduleAppointment(1);
        // Retrieve the rental info from blockchain by calling function getRentalPptyInfo()
        const result1 = await supplyChain.getRentalPptyInfo.call(1);

        console.log("2getRentalPPty Result : " + result1[0] + "[]" + result1[1]+ "[]" + result1[2]+ "[]" + result1[3]+ "[]" + result1[4])
        
        // Verify the result set
        assert.equal(result1[3], "Cleaning Scheduled");
        
    })    

    // 5th Test
    it("Testing smart contract function cleanRental() ", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        await supplyChain.cleanRental(1);
        // Retrieve the rental info from blockchain by calling function getRentalPptyInfo()
        const result1 = await supplyChain.getRentalPptyInfo.call(1);

        console.log("2getRentalPPty Result : " + result1[0] + "[]" + result1[1]+ "[]" + result1[2]+ "[]" + result1[3]+ "[]" + result1[4])
        
        // Verify the result set
        assert.equal(result1[3], "Cleaned");
        
    })    

        // 6th Test
    it("Testing smart contract function checkIn() ", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        await supplyChain.checkIn(1);
        // Retrieve the rental info from blockchain by calling function getRentalPptyInfo()
        const result1 = await supplyChain.getRentalPptyInfo.call(1);

        console.log("2getRentalPPty Result : " + result1[0] + "[]" + result1[1]+ "[]" + result1[2]+ "[]" + result1[3]+ "[]" + result1[4])
        
        // Verify the result set
        assert.equal(result1[3], "Occupied");
        
    })    

    // 7th Test
    it("Testing smart contract function checkOut() ", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        await supplyChain.checkOut(1);
        // Retrieve the rental info from blockchain by calling function getRentalPptyInfo()
        const result1 = await supplyChain.getRentalPptyInfo.call(1);

        console.log("2getRentalPPty Result : " + result1[0] + "[]" + result1[1]+ "[]" + result1[2]+ "[]" + result1[3]+ "[]" + result1[4])
        
        // Verify the result set
        assert.equal(result1[3], "In Market");
        
    })    

});

